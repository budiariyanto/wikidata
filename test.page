# Git
Created Wednesday 13 August 2014

## Apa Itu Git
Git adalah distributed versioning control system(DVCS). Berguna untuk versioning file-file yang kita buat.

Installing Git
--------------
Git bisa didownload di http://git-scm.com

Jika menggunakan Ubuntu atau debian-based distro, bisa menggunakan perintah:
$ sudo apt-get install git

Konfigurasi Git
---------------
Sebelum mengoperasikan git, ada baiknya kita mengkonfigurasi git terlebih dahulu. Beberapa konfigurasi yang sering kita lakukan adalah sebagai berikut:

### First things first â€“ Nama Kita
$ git config --global user.name "Budi Ariyanto"
$ git config --global user.email "fx.budi.ariyanto@gmail.com"

### Better log messages
$ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset%s%Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit"

This command will generate nicely coloured and formatted git logs. See more details in here

### Set Default Merge Tool
Merge tool yang cukup populer adalah diffmerge atau meld. Contoh konfigurasi di bawah ini adalah untuk diffmerge

$ git config --global merge.tool diffmerge
$ git config --global mergetool.diffmerge.trustexitcode true
$ git config --global mergetool.keepbackup false
$ git config --global mergetool.diffmerge.cmd "/usr/bin/diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\""

### Set Default Diff Tool
$ git config --global diff.tool diffmerge
$ git config --global difftool.diffmerge.cmd diffmerge '$LOCAL' '$REMOTE'

Create Repository
-----------------
Buat folder seperti biasa lalu masuk ke dalam folder tersebut. Jalankan perintah:
$ git init

Perintah tersebut akan membuat git repository yang bersifat working repository. Jadi file-file yang dibuat akan ada di repository tersebut. Hal ini tidak disarankan. Cara yang baik adalah membuat git bare repository. Bare maksudnya adalah repository kita digelar di situ. Yang ada hanyalah file-file binary snapshot dari git, konfigurasi dan file-file lain yang digenerate oleh git. Bare repository biasanya dipasang di server. Bare repository ini akan di-clone oleh client. Untuk membuat bare git repository, jalankan perintah:
$ git init --bare

Konvensi penamaan direktori untuk repository git adalah <nama_repository>.git

Clone Repository
----------------
Untuk clone repository, jalankan perintah:
$ git clone <URL>

Atau jika ingin clone sekaligus rename nama direktori, jalankan perintah:
$ git clone <URL> <nama_direktori>

Staged Files
------------
Git menggunakan sistem staging untuk manipulasi file ke repositorynya. Dilihat dari namanya, staging berarti ada semacam tingkatan. Pada git, tingkatan ini ada 3 yaitu:
* Untracked: File ada tapi belum masuk ke dalam repository git
* To be committed: File-file ini nanti akan dicommit ketika perintah commit dijalankan
* Committed: File-file yang sudah tercommit, yang nantinya bisa dipush ke remote repository ketika menjalankan perintah push

Git Ignore
----------
Ada file-file yang kita tidak ingin masukkan ke dalam git repo. Untuk mengabaikannya, kita dapat membuat file yang bernama .gitignore di dalam root directory repository. Berikut ini adalah sample gitignore dari github:
# Compiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so
 
# Packages #
############
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip
 
# Logs and databases #
######################
*.log
*.sql
*.sqlite
 
# OS generated files #
######################
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db


Staging Files
-------------
Untuk menambahkan file supaya distage oleh git, kita menjalankan perintah:
$ git add <filename>

File name dapat menggunakan regular expression.

Melihat Status Files
--------------------
Untuk melihat status dari file-file yang sudah kita buat termasuk ke dalam stage yang mana, jalankan perintah:
$ git status

Committing Files
----------------
Untuk mengcommit files, jalankan perintah:
$ git commit -m "commit messages"

Sebaiknya 1 perubahan untuk 1 commit, supaya commit message bisa lebih jelas dan fokus untuk perubahan apa.

Moving Files
------------
Untuk memindahkan file atau merename file, kita tidak dapat langsung memindahkan atau mengubah nama file menjadi seperti yang kita mau. Jika itu dilakukan, nanti workfile dengan git repository snapshot tidak sinkron. Cara memindahkan atau merename file adalah menjalankan perintah mv milik git sebagai berikut:
$ git mv <filename>

Deleting Files
--------------
Sama seperti move/rename files, kita tidak dapat menghapus file begitu saja. Untuk menghapus file kita jalankan perintah berikut:


Undoing Commit
--------------
Untuk undo commit(belum push), jalankan perintah:
$ git reset HEAD~1

Pushing Files
-------------
Untuk push file ke remote repository, jalankan perintah:
$ git push <origin> <nama_branch>

Branching
---------
Kadang-kadang kita mau melakukan modifikasi atau penambahan fitur untuk program yang kita buat, tapi modifikasi atau penambahan ini kan belum pasti dipakai atau bahkan belum pasti jadi. Untuk itu kita tidak mungkin langsung melakukannya pada source code yang sudah dibuat karena dapat menimbulkan kerusakan. Maka kita harus membuat semacam workspace lain untuk kita utak-atik secara bebas. Kalau rusak tinggal buang, kalau jadi tinggal digabung. Dalam git, istilah workspace ini adalah branch. Untuk membuat branch, jalankan perintah ini:
$ git branch <nama_branch>

Switching Into Branch
---------------------
Setelah kita membuat branch, tentunya kita ingin mengaktifkan branch tersebut supaya kita dapat bekerja di situ. Untuk mengaktifkan branchnya, jalankan perintah:
$ git checkout <nama_branch>

Melihat Branch Aktif
--------------------
Untuk melihat daftar branch sekaligus melihat branch yang aktif, jalankan perintah:
$ git branch

Merging
-------
TODO: merging

Tagging
-------
Tagging adalah memberi label pada commit yang kita buat. Setiap commit punya commit ID. Misalkan perubahan code yang kita buat sudah bisa dikatakan stabil, dengan commit ID misalnya abcdef1234. Commit ID ini dapat kita beri label misalkan '1.0.RELEASE'. Dengan begini, sangat mudah untuk mengidentifikasi versi dari aplikasi kita. Cara membuat tag adalah sebagai berikut:
$ git tag <tagname> 

