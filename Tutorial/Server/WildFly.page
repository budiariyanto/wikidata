---
title: WildFly Application Server
categories: server
...

## Apa itu WildFly
WildFly adalah Java EE application server, versi open source dari JBoss EAP(Enterprise Application Platform).

## Download WildFly
Distribusi WildFly bisa didownload di [http://wildfly.org/downloads/](http://wildfly.org/downloads/). Rekomendasi saya pilih yang formatnya tgz saja karena ukuran filenya lebih kecil.

## Installing WildFly
Cara menginstall WildFly cukup dengan mengekstraknya saja di direktori yang Anda mau.

## Running WildFly
### Standalone mode
Kita dapat menjalankan WildFly pada standalone mode jika kita tidak berada pada clustered environment, konkretnya kita menjalankan aplikasi kita pada 1 mesin server saja.

Cara running WildFly adalah dengan mengeksekusi file ```JBOSS_HOME/bin/standalone.sh```. Ketika running, defaultnya WildFly akan membaca file konfigurasi dari ```JBOSS_HOME/standalone/configuration/standalone.xml```. Jika ingin running dengan konfigurasi full profile, cara runningnya adalah dengan menjalankan perintah ```JBOSS_HOME/bin/standalone.sh -c standalone-full.xml```. Perbedaan file konfigurasi ```standalone.xml``` dengan ```standalone-full.xml``` adalah fitur untuk messaging(jms). File konfigurasi ```standalone-full.xml``` akan meload fitur untuk messaging.

### Managed Domain mode
WildFly managed domain mode dapat mengontrol dan mengkonfigurasi multi-instance di banyak mesin server fisik maupun virtual. Konfigurasi default dari mode ini adalah include 1 domain controller dan 1 server group berisi 3 server yang berjalan di localhost. Dari ketiga server, yang otomatis berjalan hanya 2 saja, satunya harus kita jalankan manual.

Untuk selajutnya, WildFly administration console berjalan pada port 9990. Supaya mudah mengaksesnya, WildFly sudah membuatkan landing page di [localhost:8080](http://localhost:8080).

## Stop WildFly Server
Untuk menshutdown WildFly, masuk ke direktori ```bin``` dari WildFly, lalu kita menjalankan perintah sebagai berikut:

```bash
$ ./jboss-cli.sh --connect command=:shutdown
```

## Konfigurasi JDBC Driver
JDBC driver dapat dikonfigurasi dengan 2 cara. Yang pertama adalah menaruh file ```.jar```nya ke dalam direktori ```JBOSS_HOME/standalone/deployments```. Ketika application server dilaunch, otomatis JDBC driver akan terload dan siap dipakai ketika kita ingin membuat datasource. Direkomendasikan menggunakan cara ini.

Cara yang kedua adalah dengan mengkonfigurasi JDBC driver sebagai module. Caranya adalah:

1. Copy file ```.jar``` driver ke ```JBOSS_HOME/modules/system/layers/base```. Misalkan kita menggunakan driver postgresql, berarti kita copykan drivernya ke dalam direktori ```JBOSS_HOME/modules/system/layers/base/org/postgresql/main```.
1. Pada direktori ```JBOSS_HOME/modules/system/layers/base/org/postgresql/main```, buat file bernama module.xml. Isinya adalah sebagai berikut:
```xml
<?xml version="1.0" encoding="UTF-8"?>
<module xmlns="urn:jboss:module:1.3" name="org.postgresql">
    <resources>
        <resource-root path="postgresql-9.3-1102.jdbc41.jar"/>
    </resources>
    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>
```
1. Tambahkan definisi driver dengan memodifikasi file konfigurasi ```JBOSS_HOME/standalone/configuration/standalone.xml``` atau ```JBOSS_HOME/standalone/configuration/standalone-full.xml``` atau keduanya juga boleh tergantung file konfigurasi mana yang ingin kita pakai saat menjalankan application server. Tambahkan tag xml berikut ini:
```xml
<datasources>
    <datasource jndi-name="java:jboss/datasources/ExampleDS" pool-name="ExampleDS" enabled="true" use-java-context="true">
     ........
        <drivers>
           ........
           <driver name="postgresql" module="org.postgresql">
               <driver-class>org.postgresql.Driver</driver-class>
           </driver>
        </drivers>
    </datasource>
</datasources>
```
1. Restart application server untuk mereload.

## Object Relational Mapping Layer
Secara default, untuk ORM layer WildFly menggunakan Hibernate. Berikut ini adalah catatan konfigurasi ketika kita ingin menggunakan OpenJPA atau EclipseLink.

### Menggunakan OpenJPA
Kita perlu mengcopykan OpenJPA jar ke dalam folder ```modules/system/layers/base/org/apache/openjpa/main```. Setelah itu update file ```modules/system/layers/base/org/apache/openjpa/main/module.xml``` dengan menambahkan definisi OpenJPA jar pada file tersebut.

```xml
<module xmlns="urn:jboss:module:1.1" name="org.apache.openjpa">
    <resources>
        <resource-root path="jipijapa-openjpa-1.0.1.Final.jar"/>
        <resource-root path="openjpa-all.jar"/>
        <resource-root path="serp.jar"/>
    </resources>
 
    <dependencies>
        <module name="javax.api"/>
        <module name="javax.annotation.api"/>
        <module name="javax.enterprise.api"/>
        <module name="javax.persistence.api"/>
        <module name="javax.transaction.api"/>
        <module name="javax.validation.api"/>
        <module name="javax.xml.bind.api"/>
        <module name="org.apache.commons.collections"/>
        <module name="org.apache.commons.lang"/>
        <module name="org.jboss.as.jpa.spi"/>
        <module name="org.jboss.logging"/>
        <module name="org.jboss.vfs"/>
        <module name="org.jboss.jandex"/>
    </dependencies>
</module>
```

### Menggunakan EclipseLink
Kita perlu mengcopykan eclipselink jar ke dalam folder ```modules/system/layers/base/org/eclipse/persistence/main```. Setelah itu update file ```modules/system/layers/base/org/eclipse/persistence/main/module.xml``` dengan menambahkan definisi eclipselink jar pada file tersebut.

```xml
<module xmlns="urn:jboss:module:1.1" name="org.eclipse.persistence">
    <resources>
        <resource-root path="jipijapa-eclipselink-1.0.1.Final.jar"/>
        <resource-root path="eclipselink-2.5.2.jar"/>
    </resources>
 
    <dependencies>
        <module name="asm.asm"/>
        <module name="javax.api"/>
        <module name="javax.annotation.api"/>
        <module name="javax.enterprise.api"/>
        <module name="javax.persistence.api"/>
        <module name="javax.transaction.api"/>
        <module name="javax.validation.api"/>
        <module name="javax.xml.bind.api"/>
        <module name="org.antlr"/>
        <module name="org.apache.commons.collections"/>
        <module name="org.dom4j"/>
        <module name="org.javassist"/>
        <module name="org.jboss.as.jpa.spi"/>
        <module name="org.jboss.logging"/>
        <module name="org.jboss.vfs"/>
    </dependencies>
</module>
```

Supaya WildFly dapat mendeploy aplikasi kita menggunakan eclipselink, kita harus menambahkan definisi JPA provider pada file ```persistence.xml``` di dalam project kita seperti ini:

```xml
<provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
```

Supaya definisi tersebut dapat terbaca oleh WildFly, kita harus menambahkan konfigurasi pada file konfigurasi WildFly, dalam kasus ini saya menggunakan file```standalone-full.xml```. Tambahkan definisi xml berikut ini ke dalamnya:

```xml
<system-properties>
   ...
   <property name="eclipselink.archive.factory" value="org.jipijapa.eclipselink.JBossArchiveFactoryImpl"/>
</system-properties>
```

Jika ingin menambahkan dengan menggunakan script dari WildFly, kita bisa menjalankan perintah berikut ini:

```bash
$ ./jboss-cli.sh --connect '/system-property=eclipselink.archive.factory:add(value=org.jipijapa.eclipselink.JBossArchiveFactoryImpl)'
```

Panduan lengkap konfigurasi eclipselink menggunakan WildFly bisa dibaca di [sini](https://community.jboss.org/wiki/HowToUseEclipseLinkWithAS7)

Jika kita menggunakan WildFly 8.1.0 dengan EclipseLink 2.5.2, kita akan mendapatkan exception sebagai berikut:

```
Caused by: java.lang.ClassNotFoundException: javax.ws.rs.ext.ExceptionMapper from [Module "org.eclipse.persistence:main" from local module loader...
```

Masalah ini dapat diselesaikan dengan menambahkan dependency ke dalam file ```modules/system/layers/base/org/eclipse/persistence/main/module.xml```:

```xml
<module name="javax.ws.rs.api"/>
```

## Konfigurasi Interface
Secara default, konfigurasi interface pada WildFly hanya bind localhost(127.0.0.1). Jadi aplikasi web dan web management consolenya hanya bisa diakses lewat komputer lokal. Konfigurasi default diset seperti ini untuk alasan keamanan. Untuk mengkonfigurasi supaya aplikasi web dan web management consolenya dapat diakses dari komputer luar, kita konfigurasi interfacenya terlebih dahulu. Cari tag ```<interfaces>``` pada file konfigurasi yang kita gunakan. Biasanya kita menggunakan ```standalone.xml``` atau ```standalone-full.xml```. Berikut ini contoh konfigurasinya:

```xml
<interfaces>
  <interface name="management">
   <inet-address value="127.0.0.1"/>
  </interface>
  <interface name="public">
   <inet-address value="127.0.0.1"/>
  </interface>
</interfaces>
```

Contoh konfigrasi yang lain:
```xml
<interface name="global">
   <!-- Use the wildcard address -->
   <any-address/>
</interface>
 
<interface name="ipv4-global">
   <!-- Use the IPv4 wildcard address -->
   <any-ipv4-address/>
</interface>
 
<interface name="ipv6-global">
   <!-- Use the IPv6 wildcard address -->
   <any-ipv6-address/>
</interface>
 
<interface name="external">
   <nic name="eth0"/>
</interface>
 
<interface name="default">
   <!-- Match any interface/address on the right subnet if it's
        up, supports multicast and isn't point-to-point -->
   <subnet-match value="192.168.0.0/16"/>
   <up/>
   <multicast/>
   <not>
      <point-to-point/>
   </not>
</interface>
```